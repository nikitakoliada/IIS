@using IIS.ViewModels
@model IIS.ViewModels.EquipmentViewModel

@{
    ViewData["Title"] = "Edit Equipment";
}

<h1>Edit Equipment</h1>

<hr/>
<div class="row">
    <div class="col-md-4">
        <form id="eq_form" asp-action="Edit" onsubmit="interceptSubmit()">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Equipment fields -->
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control"/>
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="ManufactureYear" class="control-label"></label>
                <input asp-for="ManufactureYear" class="form-control"/>
                <span asp-validation-for="ManufactureYear" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="PurchaseDate" class="control-label"></label>
                <input asp-for="PurchaseDate" class="form-control"/>
                <span asp-validation-for="PurchaseDate" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Image" class="control-label"></label>
                <input asp-for="Image" class="form-control"/>
                <span asp-validation-for="Image" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="MaxRentalDays" class="control-label"></label>
                <input asp-for="MaxRentalDays" class="form-control"/>
                <span asp-validation-for="MaxRentalDays" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="StudioId" class="control-label"></label>
                <select asp-for="StudioId" class="form-control" asp-items="ViewBag.StudioId"></select>
                <span asp-validation-for="StudioId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="EquipmentTypeId" class="control-label"></label>
                <select asp-for="EquipmentTypeId" class="form-control" asp-items="ViewBag.EquipmentTypeId"></select>
                <span asp-validation-for="EquipmentTypeId" class="text-danger"></span>
            </div>

            <!-- Button to show the Rental Interval section -->
            <div class="form-group">
                <label class="control-label">Add Rental Interval</label>
                <button type="button" class="btn btn-secondary" onclick="showIntervalSection()">+</button>
            </div>

            <!-- Inline section for adding Rental Interval details -->
            <div id="intervalSection" class="mt-3" style="display:none;">
                <h5>Rental Interval Details</h5>
                <div class="form-group">
                    <label for="dayOfWeekSelect" class="control-label">Day of the Week</label>
                    <select id="dayOfWeekSelect" class="form-control">
                        <option value="Sunday">Sunday</option>
                        <option value="Monday">Monday</option>
                        <option value="Tuesday">Tuesday</option>
                        <option value="Wednesday">Wednesday</option>
                        <option value="Thursday">Thursday</option>
                        <option value="Friday">Friday</option>
                        <option value="Saturday">Saturday</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="pickupPlaceInput" class="control-label">Place of Pickup</label>
                    <input type="text" id="pickupPlaceInput" class="form-control" placeholder="Enter pickup place"/>
                </div>
                <div class="form-group">
                    <label for="startTimeInput" class="control-label">Start Time</label>
                    <input type="time" id="startTimeInput" class="form-control"/>
                </div>
                <div class="form-group">
                    <label for="endTimeInput" class="control-label">End Time</label>
                    <input type="time" id="endTimeInput" class="form-control"/>
                </div>
                <button type="button" class="btn btn-primary mt-3" onclick="addRentalInterval()">Add Interval</button>
            </div>

            <!-- Placeholder to display the selected Rental Intervals as labels -->
            <div id="selectedIntervalsContainer" class="mt-3">
                @if (Model.RentalDayIntervals != null && Model.RentalDayIntervals.Any())
                {
                    foreach (var interval in Model.RentalDayIntervals.Select((value, index) => new { value, index }))
                    {
                        <div class="badge bg-secondary m-1 p-2 d-flex align-items-center" data-index="@interval.index">
                            <span>Day: @interval.value.DayOfWeek, Place: @interval.value.Place, Start: @interval.value.StartTime, End: @interval.value.EndTime</span>
                            <button type="button" class="btn btn-danger btn-sm ms-2" onclick="removeRentalInterval(this, @interval.index)">x</button>

                            <!-- Hidden inputs for binding -->
                            <input type="hidden" name="RentalDayIntervals[@interval.index].DayOfWeek" value="@interval.value.DayOfWeek"/>
                            <input type="hidden" name="RentalDayIntervals[@interval.index].Place" value="@interval.value.Place"/>
                            <input type="hidden" name="RentalDayIntervals[@interval.index].StartTime" value="@interval.value.StartTime"/>
                            <input type="hidden" name="RentalDayIntervals[@interval.index].EndTime" value="@interval.value.EndTime"/>
                        </div>
                    }
                }
            </div>
            <div id="userBorrowLimitations">
                <label class="control-label">Limit users to borrow the equipment:</label>
                @if (Model.UsersForbiddenToBorrow != null)
                {
                    @for (int i = 0; i < Model.UsersForbiddenToBorrow.Count; i++)
                    {
                        <div class="badge bg-secondary m-1 limitedUser">
                            Email: @Model.UsersForbiddenToBorrow[i].Name

                            <!-- Hidden inputs for binding -->
                            <input type="hidden" name="UsersForbiddenToBorrow[@i].Id" value="@Model.UsersForbiddenToBorrow[i].Id"/>
                            <input type="hidden" name="UsersForbiddenToBorrow[@i].Name" value="@Model.UsersForbiddenToBorrow[i].Name"/>

                            <button type="button" onclick="removeLimitation(this)">Remove Limitation</button>

                        </div>
                    }
                }
            </div>
            <select id="userToLimit">
                <option disabled selected value="">--- Select user ---</option>
                @foreach (var user in (IEnumerable<UserViewModel>)ViewData["StudioUsers"])
                {
                    <option value="@user.Id">@user.Name</option>
                }
            </select>
            <button type="button" onclick="addUserToLimit()" id="add-user-row" class="btn btn-primary">Limit User</button>

            <div class="form-group mt-3">
                <input type="submit" onsubmit="interceptSubmit()" value="Save Changes" class="btn btn-primary"/>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<script>
    let rentalIntervalIndex = @Model.RentalDayIntervals?.Count ?? 0; // Initialize the rental interval index
    function interceptSubmit() {
        reindexItems();
    }
    
    function reindexItems() {
        const items = document.querySelectorAll('#userBorrowLimitations .limitedUser');
        items.forEach((item, index) => {
            item.querySelectorAll('[name]').forEach(input => {
                const name = input.getAttribute('name');
                if (name) {
                    const newName = name.replace(/\[\d+\]/, `[${index}]`);
                    input.setAttribute('name', newName);
                }
            });
    
            item.querySelectorAll('[id]').forEach(input => {
                const id = input.getAttribute('id');
                console.log(id);
            
                if (id) {
                    const newId = id.replace(/-\d+/, `-${index}`);
                    input.setAttribute('id', newId);
                }
            });
        });
    }

    let userCounter = @Model.UsersForbiddenToBorrow?.Count ?? 0; // Starting counter value for new users

    // Function to add a new user limitation        
    function addUserToLimit() {
        const selectElement = document.getElementById("userToLimit");        
        const userId = selectElement.value;
                
        const userName = selectElement.options[selectElement.selectedIndex].text;

        if (!userId) {
            alert("Please select a user!");
            return;
        }
    
        const userDiv = document.createElement("div");
        userDiv.classList.add("badge", "bg-secondary", "m-1", "limitedUser");
        userDiv.innerHTML = `Email: ${userName}`;
                
        const userIdInput = document.createElement("input");
        userIdInput.type = "hidden";
        userIdInput.name = `UsersForbiddenToBorrow[${userCounter}].Id`;
        userIdInput.value = userId;
                
        const userNameInput = document.createElement("input");
        userNameInput.type = "hidden";
        userNameInput.name = `UsersForbiddenToBorrow[${userCounter}].Name`;
        userNameInput.value = userName;
    
        userDiv.appendChild(userIdInput);
        userDiv.appendChild(userNameInput);
    
        const container = document.getElementById("userBorrowLimitations");
        container.appendChild(userDiv);
    
        const removeButton = document.createElement("button");
        removeButton.type = "button";
        removeButton.textContent = "Remove Limitation";
        removeButton.onclick = function() { removeLimitation(removeButton); };        
        userDiv.appendChild(removeButton);
    
        userCounter++;
    }

    function removeLimitation(button) {
        console.log(button);
        const itemDiv = button.closest('.limitedUser');
        if (itemDiv) {
            itemDiv.remove();
        }
    }
    function showIntervalSection() {
        document.getElementById("intervalSection").style.display = "block";
    }

    function addRentalInterval() {
        const dayOfWeek = document.getElementById("dayOfWeekSelect").value;
        const pickupPlace = document.getElementById("pickupPlaceInput").value;
        const startTime = document.getElementById("startTimeInput").value;
        const endTime = document.getElementById("endTimeInput").value;

        if (dayOfWeek && pickupPlace && startTime && endTime) {
            const intervalsContainer = document.getElementById("selectedIntervalsContainer");

            // Create a new div for the interval
            const intervalDiv = document.createElement("div");
            intervalDiv.className = "badge bg-secondary m-1 p-2 d-flex align-items-center";

            const label = document.createElement("span");
            label.textContent = `Day: ${dayOfWeek}, Place: ${pickupPlace}, Start: ${startTime}, End: ${endTime}`;
            intervalDiv.appendChild(label);

            // Add delete button
            const deleteButton = document.createElement("button");
            deleteButton.className = "btn btn-danger btn-sm ms-2";
            deleteButton.textContent = "x";
            deleteButton.onclick = function () {
                removeRentalInterval(intervalDiv, rentalIntervalIndex - 1);
            };
            intervalDiv.appendChild(deleteButton);

            intervalsContainer.appendChild(intervalDiv);

            // Add hidden inputs for binding
            const form = document.getElementById("eq_form");
            addHiddenInput(form, `RentalDayIntervals[${rentalIntervalIndex}].DayOfWeek`, dayOfWeek);
            addHiddenInput(form, `RentalDayIntervals[${rentalIntervalIndex}].Place`, pickupPlace);
            addHiddenInput(form, `RentalDayIntervals[${rentalIntervalIndex}].StartTime`, startTime);
            addHiddenInput(form, `RentalDayIntervals[${rentalIntervalIndex}].EndTime`, endTime);

            rentalIntervalIndex++;
            document.getElementById("pickupPlaceInput").value = "";
            document.getElementById("startTimeInput").value = "";
            document.getElementById("endTimeInput").value = "";
            document.getElementById("intervalSection").style.display = "none";
        }
    }

    function removeRentalInterval(button, index) {
        // Remove the interval's visual representation
        const intervalDiv = button.closest(".badge");
        if (intervalDiv) {
            intervalDiv.remove();
        }
        else {
            button.remove();
        }

        // Find and remove the associated hidden inputs from the form
        const form = document.getElementById("eq_form");
        form.querySelectorAll(`input[name^='RentalDayIntervals[${index}]']`).forEach(el => el.remove());

        // Re-index remaining intervals to maintain a consistent order
        reIndexRentalIntervals();
    }

    function addHiddenInput(form, name, value) {
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = name;
        input.id = name;
        input.value = value;
        form.appendChild(input);
    }

    function reIndexRentalIntervals() {
        const form = document.getElementById("eq_form");
        const intervalsContainer = document.getElementById("selectedIntervalsContainer");

        rentalIntervalIndex = 0; // Reset the index
        Array.from(intervalsContainer.children).forEach((intervalDiv) => {
            // Update the `data-index` attribute for the visual representation
            intervalDiv.setAttribute("data-index", rentalIntervalIndex);

            // Remove existing hidden inputs for the current interval
            form.querySelectorAll(`input[name^='RentalDayIntervals[${rentalIntervalIndex}]']`).forEach(input => input.remove());

            // Re-create hidden inputs based on the displayed interval data
            const label = intervalDiv.querySelector("span").textContent;
            const [dayPart, placePart, startPart, endPart] = label.match(/Day: (.+), Place: (.+), Start: (.+), End: (.+)/).slice(1);

            addHiddenInput(form, `RentalDayIntervals[${rentalIntervalIndex}].DayOfWeek`, dayPart);
            addHiddenInput(form, `RentalDayIntervals[${rentalIntervalIndex}].Place`, placePart);
            addHiddenInput(form, `RentalDayIntervals[${rentalIntervalIndex}].StartTime`, startPart);
            addHiddenInput(form, `RentalDayIntervals[${rentalIntervalIndex}].EndTime`, endPart);

            rentalIntervalIndex++; // Increment index for the next interval
        });
    }

</script>